import numpy as np
import matplotlib.pyplot as plt
import os, cv2
import torch
from keras import Model
from keras.applications import InceptionResNetV2
from keras.applications.vgg16 import preprocess_input
from keras.layers import Dense, Flatten, Dropout, Conv2D, MaxPooling2D
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import tensorflow as tf
from tensorflow import keras
from keras.utils import load_img, img_to_array
import keras.utils as image
from sklearn import metrics
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from ultralytics import YOLO
#### accumulation des donnes
train_path = ’dataset/train’
validation_path = ’dataset/validation’
test_path = ’dataset/test’
###### Generation des donnees InceptionResNetV2 ####
from keras.preprocessing.image import ImageDataGenerator
train_batches = ImageDataGenerator(
preprocessing_function=tf.keras.applications.mobilenet.preprocess_input). \
flow_from_directory(directory=train_path, target_size=(299,299), batch_size=10)
validation_batches = ImageDataGenerator(
preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
directory=validation_path, target_size=(299,299), batch_size=10)
test_batches = ImageDataGenerator(
preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).\
flow_from_directory(directory=test_path,
target_size=(299,299),
batch_size=10,
shuffle=False)
#----------------------------------------------------------------
# getting Train and Test DAtaset AdaBoostClassifier ##########################################
#######
def getimagets (src_path):
# Initialize empty lists for features (X_train) and labels (y_train)
X_train = []
y_train = []
# Get a list of subdirectories (class labels)
class_labels = sorted(os.listdir(src_path))
# Loop through each class label
for label_index, label in enumerate(class_labels):
class_dir = os.path.join(src_path, label)
# Loop through the images in each class directory
for image_filename in os.listdir(class_dir):
image_path = os.path.join(class_dir, image_filename)
img = load_img(image_path, target_size=(299, 299)) # Load and resize image
img = img_to_array(img) # Convert image to numpy array
img = img / 255.0 # Normalize pixel values to be between 0 and 1
X_train.append(img)
y_train.append(label) # Use label index as the class label
# Split the data into training and validation sets
X_train,X_val, Y_train , Y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)
# Optionally, you can print the shapes to verify
X_train = np.array(X_train)
Y_train = np.array(Y_train)
X_val = np.array(X_val)
Y_val = np.array(Y_val)
return X_train,X_val, Y_train , Y_val
X_train,X_val, Y_train , Y_val=getimagets(src_path=’dataset/train’)
####################################################################################
######
## Creation Model InceptionResNetV2 #################################### ##
#mod_vg=keras.applications.vgg16.VGG16()
#mod_inc=keras.applications.inception_resnet_v2.InceptionResNetV2()
mod_inc = InceptionResNetV2(
include_top=False,
input_shape=(299,299,3))
#for layer in mod_inc.layers[:-2]:
# layer.trainable = False
#mod_resnet=keras.applications.InceptionResNetV2()
transfer_model = mod_inc.output
#transfer_model = MaxPooling2D(pool_size=(8, 8))(transfer_model)
#transfer_model=Conv2D(64, (3, 3), activation=’relu’)(transfer_model)
#transfer_model = Flatten()(transfer_model)
#transfer_model = Dense(64, activation=’relu’)(transfer_model)
#transfer_model = Dropout(0.2)(transfer_model)
#transfer_model = Dense(5, activation=’relu’)(transfer_model)
transfer_model = Flatten( name=’yolo_clf_0’)(transfer_model)
#transfer_model = Dense(20,name=’yolo_clf_1’,activation=’relu’ )(transfer_model)
transfer_model = Dropout(0.5)(transfer_model)
#transfer_model = Dense(2, activation=’Softmax’)(transfer_model)
model = Model(inputs=mod_inc.input, outputs=transfer_model)
## --------------------------------------#########################################
#model.summary()
##---------------------------###
#model.compile(optimizer=’adam’,loss=’categorical_crossentropy’,metrics=[’accuracy’])
#model.fit(train_batches,validation_data=validation_batches,validation_steps=13, epochs=1,verbose=3)
X_train_feature=model.predict(X_train)
X_test_feature =model.predict(X_val)
X_train_feature = X_train_feature.reshape(X_train_feature.shape[0], -1)
X_test_feature = X_test_feature.reshape(X_test_feature.shape[0], -1)
print(’1 ere Training data shape X_train_features: ’, X_train_feature.shape)
print(’1 ere Training data shape X_test_features: ’, X_test_feature.shape)
# 2eme Data extraction train_test_split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_train_feature, Y_train, test_size=0.2, random_state=42
)
#X_train,X_test, Y_train , y_test=getimagets(src_path=’dataset/train’)
print(’ 2 eme Training data shape X_train_: ’, X_train.shape)
print(’2 eme Training data shape X_test_: ’, X_test.shape)
def flattentrain(X_train):
num_samples = X_train.shape[0]
num_features = X_train.shape[1] * X_train.shape[2] * X_train.shape[3]
X_train_flattened = X_train.reshape(num_samples, num_features)
return X_train_flattened
X_train=flattentrain(X_train)
X_test=flattentrain(X_test)
##---------Prediction InceptionResNetV2 ------------------###
#def featimageINC(img_path):
# test_img=load_img(img_path, target_size=(299, 299))
#test_img=image.img_to_array(test_img)
#test_img=np.expand_dims(test_img, axis=0)
#test_img=preprocess_input(test_img)
#reslt=model.predict(test_img)
#return reslt
#reslt=featimageINC(’714.jpg.jpg’)
#Y=model.predict_generator(resultat(1),steps=1)
#if reslt[0][0]>0.8 and reslt[0][0] >0 :
# predic="cat"
#elif reslt[0][1]>0.8:
# predic="dog"
#else:
# predic="autre"
#print(predic)
#print(reslt[0][0])
#print(reslt[0][1])
#### fin###########################################################
### Debut Model AdaBoostClassifier
#######" Creatioing: AdaBoost with weak learner #####################"
base_classifier = RandomForestClassifier()
adaboost_classifier = AdaBoostClassifier(estimator=base_classifier, n_estimators=2, random_state=42)
############# changer Xtrain DATA de 4D a 2D for AdaBoostClassifier fit function
print(’X PREDICTION shape X PREDCT: ’, X_train.shape)
########################"" AdaBoost training #####################
adaboost_classifier.fit(X_train, Y_train)
y_pred = adaboost_classifier.predict(X_test)
# Calculate the accuracy
print(’Y PREDICTION shape Y PREDCT: ’, y_pred.shape)
accuracy = accuracy_score(Y_val, y_pred)
print(f’AdaBoost Accuracy: {accuracy}’)
